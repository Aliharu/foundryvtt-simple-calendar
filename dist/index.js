(()=>{"use strict";class e{static info(e){e&&console.info("%cSimple Calendar","color:blue;",` | ${e}`)}static warn(e){e&&console.warn("%cSimple Calendar","color:orange;",` | ${e}`)}static error(e){e instanceof Error?console.error("%cSimple Calendar","color:red;",` | Error "${e.message}"\n${e.stack}`):console.error("%cSimple Calendar","color:red;",` | ${e}`)}static debug(t){t&&e.debugMode&&console.debug("%cSimple Calendar","color:green;",` | ${t}`)}}e.debugMode=!1;class t{constructor(e){this.prefix="",this.postfix="",this.months=[],this.numericRepresentation=e,this.selectedYear=e,this.visibleYear=e}toTemplate(){return{display:this.getDisplayName(),numericRepresentation:this.numericRepresentation,months:this.getMonthsForTemplate()}}clone(){const e=new t(this.numericRepresentation);return e.postfix=this.postfix,e.prefix=this.prefix,e.selectedYear=this.selectedYear,e.visibleYear=this.visibleYear,e.months=this.months.map((e=>e.clone())),e}getDisplayName(){return`${this.prefix}${this.visibleYear.toString()}${this.postfix}`}getMonthsForTemplate(){return this.months.map((e=>e.toTemplate()))}getCurrentMonth(){return this.months.find((e=>e.current))}getVisibleMonth(){return this.months.find((e=>e.visible))}getSelectedMonth(){return this.months.find((e=>e.selected))}changeYear(t,n=!0,r="visible"){if("visible"===r?this.visibleYear=this.visibleYear+t:"selected"===r?this.selectedYear=this.selectedYear+t:(this.numericRepresentation=this.numericRepresentation+t,this.visibleYear=this.numericRepresentation,e.debug(`New Year: ${this.numericRepresentation}`)),this.months.length&&n){const e=r.toLowerCase();this.months.map((t=>t[e]=!1));let n=0;-1===t&&(n=this.months.length-1),this.months[n][e]=!0}}changeMonth(t,n="visible"){const r=n.toLowerCase(),i=t?1:-1;for(let n=0;n<this.months.length;n++){const a=this.months[n];if(a[r]){if(a[r]=!1,t&&n===this.months.length-1||!t&&0===n?(e.debug(`On ${t?"last":"first"} month of the year, changing to ${t?"next":"previous"} year`),this.changeYear(i,!0,r)):this.months[n+i][r]=!0,"current"===r){a.visible=!1;const t=this.getCurrentMonth();if(t){e.debug(`New Month: ${t.name}`),t.visible=!0;const n=a.getCurrentDay();if(n){let e=!1;for(let r=0;r<t.days.length;r++)t.days[r].numericRepresentation===n.numericRepresentation&&(t.days[r].current=!0,e=!0);e||(t.days[t.days.length-1].current=!0),n.current=!1}}}break}}}changeDay(e,t="current"){const n=t.toLowerCase(),r=this.getCurrentMonth();if(r){const t=r.changeDay(e,n);if(0!==t&&(this.changeMonth(t>0,n),"current"===n)){const e=this.getCurrentMonth();e&&e.days.length&&(t>0?e.days[0][n]=!0:e.days[e.days.length-1][n]=!0)}}}}class n{constructor(e,t=""){this.name="",this.numericRepresentation=0,this.current=!1,this.selected=!1,this.numericRepresentation=e,this.name=t,""===this.name&&this.numericRepresentation&&(this.name=this.numericRepresentation.toString())}toTemplate(){return{name:this.name,numericRepresentation:this.numericRepresentation,current:this.current,selected:this.selected}}clone(){const e=new n(this.numericRepresentation,this.name);return e.current=this.current,e.selected=this.selected,e}}class r{constructor(e,t,n=0){this.days=[],this.current=!1,this.visible=!1,this.selected=!1,this.name=e.trim(),this.numericRepresentation=t,""===this.name&&(this.name=t.toString()),this.populateDays(n)}populateDays(e,t=null){for(let r=1;r<=e;r++){const e=new n(r);r===t&&(e.current=!0),this.days.push(e)}}getDisplayName(){return this.numericRepresentation.toString()===this.name?this.name:`${this.name} (${this.numericRepresentation})`}toTemplate(){return{display:this.getDisplayName(),name:this.name,numericRepresentation:this.numericRepresentation,current:this.current,visible:this.visible,selected:this.selected,days:this.getDaysForTemplate()}}clone(){const e=new r(this.name,this.numericRepresentation);return e.current=this.current,e.selected=this.selected,e.visible=this.visible,e.days=this.days.map((e=>e.clone())),e}getCurrentDay(){return this.days.find((e=>e.current))}getSelectedDay(){return this.days.find((e=>e.selected))}getDaysForTemplate(){return this.days.map((e=>e.toTemplate()))}changeDay(t,n="current"){const r=n.toLowerCase();let i=t?1:-1;for(let n=0;n<this.days.length;n++){const a=this.days[n];if(a[r]){a[r]=!1,t&&n===this.days.length-1||!t&&0===n?e.debug(`On ${t?"last":"first"} day of the month, changing to ${t?"next":"previous"} month`):(e.debug(`New Day: ${this.days[n+i].numericRepresentation}`),this.days[n+i][r]=!0,i=0);break}}return i}}const i="foundryvtt-simple-calendar";var a;!function(e){e.YearConfiguration="year-config",e.MonthConfiguration="month-config",e.CurrentDate="current-date",e.Notes="notes",e.AllowPlayersToAddNotes="allow-players-add-notes"}(a||(a={}));class s{static RegisterSettings(){game.settings.register(i,a.YearConfiguration,{name:"Year Configuration",scope:"world",config:!1,type:Object,onChange:c.instance.loadYearConfiguration.bind(c.instance,!0)}),game.settings.register(i,a.MonthConfiguration,{name:"Month Configuration",scope:"world",config:!1,type:Array,default:[],onChange:c.instance.loadMonthConfiguration.bind(c.instance,!0)}),game.settings.register(i,a.CurrentDate,{name:"Current Date",scope:"world",config:!1,type:Object,onChange:()=>{c.instance.loadMonthConfiguration(),c.instance.loadCurrentDate(!0)}}),game.settings.register(i,a.Notes,{name:"Notes",scope:"world",config:!1,type:Array,onChange:c.instance.loadNotes.bind(c.instance,!0)}),game.settings.register(i,a.AllowPlayersToAddNotes,{name:"Allow Players to Add Notes",hint:"Allows any player to add a note to the calendar.",scope:"world",config:"true",type:Boolean,default:!0})}static async SaveCurrentDate(t){if(game.user.isGM){e.debug("Saving current date.");const n=t.getCurrentMonth();if(n){const r=n.getCurrentDay();if(r){const s=game.settings.get(i,a.CurrentDate),o={year:t.numericRepresentation,month:n.numericRepresentation,day:r.numericRepresentation};if(s.year!==o.year||s.month!==o.month||s.day!==o.day)return game.settings.set(i,a.CurrentDate,o);e.debug("Current Date data has not changed, not updating settings")}else e.error("Unable to save current date, no current day found.")}else e.error("Unable to save current date, no current month found.")}else e.error("Unable to save current date, no current year found.");return!1}static async SaveYearConfiguration(t){if(game.user.isGM){e.debug("Saving year configuration.");const n=game.settings.get(i,a.YearConfiguration),r={numericRepresentation:t.numericRepresentation,prefix:t.prefix,postfix:t.postfix};if(n.numericRepresentation!==r.numericRepresentation||n.prefix!==r.prefix||n.postfix!==r.postfix)return game.settings.set(i,a.YearConfiguration,r).then((()=>!0));e.debug("Year configuration has not changed, not updating settings")}return!1}static async SaveMonthConfiguration(t){if(game.user.isGM){e.debug("Saving month configuration.");const n=game.settings.get(i,a.MonthConfiguration),r=t.map((e=>({name:e.name,numericRepresentation:e.numericRepresentation,numberOfDays:e.days.length})));if(n.length!==r.length)return game.settings.set(i,a.MonthConfiguration,r).then((()=>!0));e.debug("Month configuration has not changed, not updating settings")}return!1}}class o extends FormApplication{constructor(e){super(e),this.year=e}static get defaultOptions(){const e=super.defaultOptions;return e.template="modules/foundryvtt-simple-calendar/templates/calendar-config.html",e.title="FSC.Configuration.Title",e.classes=["simple-calendar"],e.resizable=!0,e}showApp(){this.render(!0,{width:500,height:500})}closeApp(){this.close().catch(e.error)}updateApp(){this.render(!1,{width:500,height:500})}getData(){return{currentYear:this.object,months:this.object.months.map((e=>e.toTemplate()))}}activateListeners(e){e.hasOwnProperty("length")&&(e.find("#scSubmit").on("click",o.instance.saveClick.bind(this)),e.find(".remove-month").on("click",o.instance.removeMonth.bind(this)),e.find(".month-add").on("click",o.instance.addMonth.bind(this)))}addMonth(e){e.preventDefault();const t=this.object.months.length+1;this.object.months.push(new r("New Month",t,30)),this.updateApp()}removeMonth(e){e.preventDefault();const t=e.currentTarget.getAttribute("data-index");if(t&&"all"!==t){const e=parseInt(t),n=this.object.months;if(!isNaN(e)&&e<n.length){n.splice(e,1);for(let e=0;e<n.length;e++)n[e].numericRepresentation=e+1;this.updateApp()}}else t&&"all"===t&&(this.object.months=[],this.updateApp())}async saveClick(t){t.preventDefault();try{let t=!1;const n=parseInt(document.getElementById("scCurrentYear").value);isNaN(n)||(t=this.object.numericRepresentation!==n,this.object.numericRepresentation=n,this.object.selectedYear=n,this.object.visibleYear=n),this.object.prefix=document.getElementById("scYearPreFix").value,this.object.postfix=document.getElementById("scYearPostFix").value,await s.SaveYearConfiguration(this.object);const r=this.element.find(".month-name"),i=this.element.find(".month-days");for(let t=0;t<r.length;t++){const n=r[t].getAttribute("data-index");if(n){const a=parseInt(n),s=this.object.months[a];s.name=r[t].value;const o=parseInt(i[t].value);if(!isNaN(o)&&s.days.length!==o){e.debug(`Days for month ${s.name} are different, rebuilding month days`);const t=s.getCurrentDay();s.days=[];let n=null;t&&(t.numericRepresentation>=o?(e.debug("The current day falls outside of the months news days, setting to first day of the month."),n=0):n=t.numericRepresentation),s.populateDays(o,n)}}}await s.SaveMonthConfiguration(this.object.months),t&&await s.SaveCurrentDate(this.object),this.closeApp()}catch(t){e.error(t)}}}class c extends Application{constructor(){super(),this.currentYear=null}static get defaultOptions(){const e=super.defaultOptions;return e.template="modules/foundryvtt-simple-calendar/templates/calendar.html",e.title="FSC.Title",e.classes=["simple-calendar"],e.resizable=!0,e}init(){s.RegisterSettings(),this.loadYearConfiguration(),this.loadMonthConfiguration(),this.loadCurrentDate(),this.loadNotes()}getData(){var e,t;if(this.currentYear){const n=this.currentYear.getCurrentMonth(),r=this.currentYear.getSelectedMonth();return{isGM:game.user.isGM,playersAddNotes:game.settings.get(i,a.AllowPlayersToAddNotes),currentYear:this.currentYear.toTemplate(),currentMonth:null==n?void 0:n.toTemplate(),currentDay:null===(e=null==n?void 0:n.getCurrentDay())||void 0===e?void 0:e.toTemplate(),selectedYear:this.currentYear.selectedYear,selectedMonth:null==r?void 0:r.toTemplate(),selectedDay:null==r?void 0:r.getSelectedDay(),visibleYear:this.currentYear.visibleYear,visibleMonth:null===(t=this.currentYear.getVisibleMonth())||void 0===t?void 0:t.toTemplate(),showSelectedDay:this.currentYear.visibleYear===this.currentYear.selectedYear,showCurrentDay:this.currentYear.visibleYear===this.currentYear.numericRepresentation}}}getSceneControlButtons(e){let t=e.find((e=>"token"===e.name));t&&t.hasOwnProperty("tools")&&t.tools.push({name:"calendar",title:"FSC.ButtonTitle",icon:"fas fa-calendar",button:!0,onClick:()=>{c.instance.showApp()}})}showApp(){this.render(!0,{width:500,height:500})}closeApp(){this.close().catch((t=>e.error(t)))}activateListeners(e){if(e.hasOwnProperty("length")){const t=e.find(".current-date .fa");for(let e=0;e<t.length;e++)t[e].classList.contains("fa-chevron-left")?t[e].addEventListener("click",c.instance.viewPreviousMonth.bind(this)):t[e].classList.contains("fa-chevron-right")&&t[e].addEventListener("click",c.instance.viewNextMonth.bind(this));e.find(".calendar .days .day").on("click",c.instance.dayClick.bind(this)),e.find(".controls .control").on("click",c.instance.gmControlClick.bind(this)),e.find(".controls .btn-apply").on("click",c.instance.dateControlApply.bind(this)),e.find(".configure-button .control").on("click",c.instance.configurationClick.bind(this))}}viewPreviousMonth(t){e.debug("Changing view to previous month"),t.stopPropagation(),this.currentYear&&(this.currentYear.changeMonth(!1),this.updateApp())}viewNextMonth(t){e.debug("Changing view to next month"),t.stopPropagation(),this.currentYear&&(this.currentYear.changeMonth(!0),this.updateApp())}dayClick(t){e.debug("Day Clicked"),t.stopPropagation();const n=t.target.getAttribute("data-day");if(n){const t=parseInt(n)-1;if(this.currentYear&&t>-1){const e=this.currentYear.getSelectedMonth(),n=null==e?void 0:e.getSelectedDay();e&&(e.selected=!1),n&&(n.selected=!1);const r=this.currentYear.getVisibleMonth();r&&r.days.length>t&&(r.selected=!0,r.days[t].selected=!0,this.currentYear.selectedYear=this.currentYear.numericRepresentation),this.updateApp()}else e.error("Day has invalid data attribute or no current year is set!")}else e.error("Day is missing data attribute!")}gmControlClick(t){var n,r,i;t.stopPropagation();const a=t.currentTarget,s=a.getAttribute("data-type"),o=a.classList.contains("next");switch(s){case"day":e.debug((o?"Forward":"Back")+" Day Clicked"),null===(n=this.currentYear)||void 0===n||n.changeDay(o,"current"),this.updateApp();break;case"month":e.debug((o?"Forward":"Back")+" Month Clicked"),null===(r=this.currentYear)||void 0===r||r.changeMonth(o,"current"),this.updateApp();break;case"year":e.debug((o?"Forward":"Back")+" Year Clicked"),null===(i=this.currentYear)||void 0===i||i.changeYear(o?1:-1,!1,"current"),this.updateApp()}}dateControlApply(t){t.stopPropagation(),this.currentYear&&s.SaveCurrentDate(this.currentYear).catch(e.error)}configurationClick(t){t.stopPropagation(),this.currentYear?(o.instance=new o(this.currentYear.clone()),o.instance.showApp()):e.error("The Current year is not configured.")}updateApp(){this.rendered&&this.render(!1,{width:500,height:500})}loadYearConfiguration(n=!1){try{e.debug("Loading year configuration from settings.");const r=game.settings.get(i,a.YearConfiguration);r&&Object.keys(r).length?(e.debug("Setting the year from data."),this.currentYear?this.currentYear.numericRepresentation=r.numericRepresentation:this.currentYear=new t(r.numericRepresentation),this.currentYear.prefix=r.prefix,this.currentYear.postfix=r.postfix):(e.debug("No year configuration found, setting default year data."),this.currentYear=new t((new Date).getFullYear())),n&&this.updateApp()}catch(t){e.error(t)}}loadMonthConfiguration(t=!1){try{e.debug("Loading month configuration from settings.");let n=game.settings.get(i,a.MonthConfiguration);const s=(new Date).getFullYear();if(console.log(n),this.currentYear){if(n&&n.length&&(Array.isArray(n[0])&&(n=n[0]),this.currentYear.months=[],n.length)){e.debug("Setting the months from data.");for(let e=0;e<n.length;e++)Object.keys(n[e]).length&&this.currentYear.months.push(new r(n[e].name,n[e].numericRepresentation,n[e].numberOfDays));this.loadCurrentDate(!0)}0===this.currentYear.months.length&&(e.debug("No month configuration found, setting default month data."),this.currentYear.months=[new r(game.i18n.localize("FSC.Date.January"),1,31),new r(game.i18n.localize("FSC.Date.February"),2,s%4==0&&s%100!=0||s%400==0?29:28),new r(game.i18n.localize("FSC.Date.March"),3,31),new r(game.i18n.localize("FSC.Date.April"),4,30),new r(game.i18n.localize("FSC.Date.May"),5,31),new r(game.i18n.localize("FSC.Date.June"),6,30),new r(game.i18n.localize("FSC.Date.July"),7,31),new r(game.i18n.localize("FSC.Date.August"),8,31),new r(game.i18n.localize("FSC.Date.September"),9,30),new r(game.i18n.localize("FSC.Date.October"),10,31),new r(game.i18n.localize("FSC.Date.November"),11,30),new r(game.i18n.localize("FSC.Date.December"),12,31)])}else e.error("No Current year configured, can not load month data.");t&&this.updateApp()}catch(t){e.error(t)}}loadCurrentDate(t=!1){try{e.debug("Loading current date from settings.");const n=game.settings.get(i,a.CurrentDate);if(this.currentYear&&n&&Object.keys(n).length){e.debug("Loading current date data from settings."),this.currentYear.numericRepresentation=n.year,this.currentYear.visibleYear=n.year,this.currentYear.selectedYear=n.year;const t=this.currentYear.months.find((e=>e.numericRepresentation===n.month));if(t){t.current=!0,t.visible=!0;const r=t.days.find((e=>e.numericRepresentation===n.day));r?r.current=!0:(e.error("Save day could not be found in this month, perhaps number of days has changed. Setting current day to first day of month"),t.days[0].current=!0)}else e.error("Saved month could not be found, perhaps months have changed. Setting current month to the first month"),this.currentYear.months[0].current=!0,this.currentYear.months[0].visible=!0,this.currentYear.months[0].days[0].current=!0}else this.currentYear&&this.currentYear.months.length?(e.debug("No current date setting found, setting default current date."),this.currentYear.months[0].current=!0,this.currentYear.months[0].visible=!0,this.currentYear.months[0].days[0].current=!0):e.error("Error setting the current date.");t&&this.updateApp()}catch(t){e.error(t)}}loadNotes(t=!1){try{e.debug("Loading notes from settings."),game.settings.get(i,a.Notes),t&&this.updateApp()}catch(t){e.error(t)}}}e.debugMode=!0,c.instance=new c,Hooks.on("ready",(()=>{c.instance.init()})),Hooks.on("getSceneControlButtons",c.instance.getSceneControlButtons)})();